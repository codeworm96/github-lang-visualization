#!/usr/bin/env ruby 

require 'open-uri'
require 'json'
require 'octokit'

def fetch_pypl
  puts "fetching PYPL data"
  res = [];
  open("http://pypl.github.io/PYPL/All.js") { |f|
    res = f.readlines
  }
  res = res.map(&:chomp)
  File.open("data/pypl.js", "w") do |f|
    res.each { |line| f.puts line }
  end
  puts "data saved to data/pypl.js"
end

def log(s)
  File.open('log','a') do |f|
    f.puts s
  end
end

def repo_count(client, q)
  begin
    res = client.search_repositories q, :per_page => 1
  rescue Octokit::Error
    puts "too fast"
    sleep 60
    retry
  end
  if res[:incomplete_results]
    log('failed ' + q)
  end
  res[:total_count]
end

def fetch_github(client, date, lang, star = 0)
  res = []
  res << ["Date"] + date[1..-1]

  lang.each do |l|
    puts ">>>>language: #{l}"
    row = []
    date.each do |d|
      puts "fetching #{d}..."
      query = "created:<#{d}" 
      query += " stars:>=#{star}" if star > 0
      cnt = repo_count(client, query + " language:#{l}")
      row << cnt
    end
    (1...row.size).each do |id|
      row[id] = row[id] - row[id - 1]
    end
    row[0] = l
    res << row
  end
  res.first.zip(*res.drop(1))
end

def save_to_file(res, name)
  File.open(name, "w") do |f|
    f.puts(JSON.generate(res))
  end
end

fetch_pypl
buf = File.read('config.json')
config = JSON.parse(buf)

client = Octokit::Client.new(:access_token => config["token"])
#config["stars"].each do |star|
#  save_to_file(fetch_github(client, config["date"], config["language"], star), "data/star#{star}.json")
#end

config["date"].each do |d|
  puts d, repo_count(client, "created:<" + d)
end
